// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;
@protocol SKPhotoProtocol;

SWIFT_CLASS("_TtC14SKPhotoBrowser13SKCaptionView")
@interface SKCaptionView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPhoto:(id <SKPhotoProtocol> _Nonnull)photo;
- (CGSize)sizeThatFits:(CGSize)size;
@end


@interface SKCaptionView (SWIFT_EXTENSION(SKPhotoBrowser))
@end

@class UIImage;

SWIFT_PROTOCOL("_TtP14SKPhotoBrowser15SKPhotoProtocol_")
@protocol SKPhotoProtocol <NSObject>
@property (nonatomic, readonly, strong) UIImage * _Null_unspecified underlyingImage;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified caption;
@property (nonatomic) NSInteger index;
@property (nonatomic) UIViewContentMode contentMode;
- (void)loadUnderlyingImageAndNotify;
- (void)checkCache;
@end


SWIFT_CLASS("_TtC14SKPhotoBrowser12SKLocalPhoto")
@interface SKLocalPhoto : NSObject <SKPhotoProtocol>
@property (nonatomic, strong) UIImage * _Null_unspecified underlyingImage;
@property (nonatomic, copy) NSString * _Null_unspecified photoURL;
@property (nonatomic) UIViewContentMode contentMode;
@property (nonatomic) BOOL shouldCachePhotoURLImage;
@property (nonatomic, copy) NSString * _Null_unspecified caption;
@property (nonatomic) NSInteger index;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)checkCache;
- (void)loadUnderlyingImageAndNotify;
- (void)loadUnderlyingImageComplete;
+ (SKLocalPhoto * _Nonnull)photoWithImageURL:(NSString * _Nonnull)url;
+ (SKLocalPhoto * _Nonnull)photoWithImageURL:(NSString * _Nonnull)url holder:(UIImage * _Nullable)holder;
@end


SWIFT_CLASS("_TtC14SKPhotoBrowser7SKPhoto")
@interface SKPhoto : NSObject <SKPhotoProtocol>
@property (nonatomic, strong) UIImage * _Null_unspecified underlyingImage;
@property (nonatomic, copy) NSString * _Null_unspecified photoURL;
@property (nonatomic) UIViewContentMode contentMode;
@property (nonatomic) BOOL shouldCachePhotoURLImage;
@property (nonatomic, copy) NSString * _Null_unspecified caption;
@property (nonatomic) NSInteger index;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)checkCache;
- (void)loadUnderlyingImageAndNotify;
- (void)loadUnderlyingImageComplete;
@end


@interface SKPhoto (SWIFT_EXTENSION(SKPhotoBrowser))
+ (SKPhoto * _Nonnull)photoWithImage:(UIImage * _Nonnull)image;
+ (SKPhoto * _Nonnull)photoWithImageURL:(NSString * _Nonnull)url;
+ (SKPhoto * _Nonnull)photoWithImageURL:(NSString * _Nonnull)url holder:(UIImage * _Nullable)holder;
@end

@class UIActivityItemProvider;
@class NSBundle;
@protocol SKPhotoBrowserDelegate;

SWIFT_CLASS("_TtC14SKPhotoBrowser14SKPhotoBrowser")
@interface SKPhotoBrowser : UIViewController
@property (nonatomic, strong) UIActivityItemProvider * _Nullable activityItemProvider;
@property (nonatomic, weak) id <SKPhotoBrowserDelegate> _Nullable delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Null_unspecified)nibNameOrNil bundle:(NSBundle * _Null_unspecified)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPhotos:(NSArray<id <SKPhotoProtocol>> * _Nonnull)photos;
- (nonnull instancetype)initWithOriginImage:(UIImage * _Nonnull)originImage photos:(NSArray<id <SKPhotoProtocol>> * _Nonnull)photos animatedFromView:(UIView * _Nonnull)animatedFromView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (void)viewDidAppear:(BOOL)animated;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)handleSKPhotoLoadingDidEndNotification:(NSNotification * _Nonnull)notification;
- (void)loadAdjacentPhotosIfNecessary:(id <SKPhotoProtocol> _Nonnull)photo;
- (void)reloadData;
- (void)performLayout;
- (void)prepareForClosePhotoBrowser;
- (void)dismissPhotoBrowserWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
- (void)determineAndClose;
@end


@interface SKPhotoBrowser (SWIFT_EXTENSION(SKPhotoBrowser))
@end


@interface SKPhotoBrowser (SWIFT_EXTENSION(SKPhotoBrowser))
@end


@interface SKPhotoBrowser (SWIFT_EXTENSION(SKPhotoBrowser))
@end

@class UIScrollView;

@interface SKPhotoBrowser (SWIFT_EXTENSION(SKPhotoBrowser)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end


@interface SKPhotoBrowser (SWIFT_EXTENSION(SKPhotoBrowser))
@end


@interface SKPhotoBrowser (SWIFT_EXTENSION(SKPhotoBrowser))
@end

@class NSTimer;

@interface SKPhotoBrowser (SWIFT_EXTENSION(SKPhotoBrowser))
- (void)initializePageIndex:(NSInteger)index SWIFT_METHOD_FAMILY(none);
- (void)jumpToPageAtIndex:(NSInteger)index;
- (id <SKPhotoProtocol> _Nonnull)photoAtIndex:(NSInteger)index;
- (void)gotoPreviousPage;
- (void)gotoNextPage;
- (void)cancelControlHiding;
- (void)hideControlsAfterDelay;
- (void)hideControls;
- (void)hideControls:(NSTimer * _Nonnull)timer;
- (void)toggleControls;
- (BOOL)areControlsHidden;
- (void)popupShareWithIncludeCaption:(BOOL)includeCaption;
- (NSInteger)getCurrentPageIndex;
@end


SWIFT_PROTOCOL("_TtP14SKPhotoBrowser30SKPhotoBrowserAnimatorDelegate_")
@protocol SKPhotoBrowserAnimatorDelegate
- (void)willPresent:(SKPhotoBrowser * _Nonnull)browser;
- (void)willDismiss:(SKPhotoBrowser * _Nonnull)browser;
@end


SWIFT_PROTOCOL("_TtP14SKPhotoBrowser22SKPhotoBrowserDelegate_")
@protocol SKPhotoBrowserDelegate
@optional
/**
  Tells the delegate that the browser started displaying a new photo
  \param index the index of the new photo

*/
- (void)didShowPhotoAtIndex:(NSInteger)index;
/**
  Tells the delegate the browser will start to dismiss
  \param index the index of the current photo

*/
- (void)willDismissAtPageIndex:(NSInteger)index;
/**
  Tells the delegate that the browser will start showing the \code
  UIActionSheet
  \endcode
  \param photoIndex the index of the current photo

*/
- (void)willShowActionSheet:(NSInteger)photoIndex;
/**
  Tells the delegate that the browser has been dismissed
  \param index the index of the current photo

*/
- (void)didDismissAtPageIndex:(NSInteger)index;
/**
  Tells the delegate that the browser did dismiss the UIActionSheet
  \param buttonIndex the index of the pressed button

  \param photoIndex the index of the current photo

*/
- (void)didDismissActionSheetWithButtonIndex:(NSInteger)buttonIndex photoIndex:(NSInteger)photoIndex;
/**
  Tells the delegate that the browser did scroll to index
  \param index the index of the photo where the user had scroll

*/
- (void)didScrollToIndex:(NSInteger)index;
/**
  Tells the delegate the user removed a photo, when implementing this call, be sure to call reload to finish the deletion process
  \param browser reference to the calling SKPhotoBrowser

  \param index the index of the removed photo

  \param reload function that needs to be called after finishing syncing up

*/
- (void)removePhoto:(SKPhotoBrowser * _Nonnull)browser index:(NSInteger)index reload:(void (^ _Nonnull)(void))reload;
/**
  Asks the delegate for the view for a certain photo. Needed to detemine the animation when presenting/closing the browser.
  \param browser reference to the calling SKPhotoBrowser

  \param index the index of the removed photo


  returns:
  the view to animate to
*/
- (UIView * _Nullable)viewForPhoto:(SKPhotoBrowser * _Nonnull)browser index:(NSInteger)index;
/**
  Tells the delegate that the controls view toggled visibility
*/
- (void)controlsVisibilityToggledWithHidden:(BOOL)hidden;
@end



SWIFT_CLASS("_TtC14SKPhotoBrowser19SKZoomingScrollView")
@interface SKZoomingScrollView : UIScrollView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)setMaxMinZoomScalesForCurrentBounds;
- (void)prepareForReuse;
- (void)displayImageWithComplete:(BOOL)flag;
- (void)displayImageFailure;
- (void)handleDoubleTap:(CGPoint)touchPoint;
@end


@interface SKZoomingScrollView (SWIFT_EXTENSION(SKPhotoBrowser))
@end


@interface SKZoomingScrollView (SWIFT_EXTENSION(SKPhotoBrowser))
@end


@interface SKZoomingScrollView (SWIFT_EXTENSION(SKPhotoBrowser))
@end


@interface SKZoomingScrollView (SWIFT_EXTENSION(SKPhotoBrowser)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end


@interface UIImage (SWIFT_EXTENSION(SKPhotoBrowser))
@end


@interface UIView (SWIFT_EXTENSION(SKPhotoBrowser))
@end

#pragma clang diagnostic pop
